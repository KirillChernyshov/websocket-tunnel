#!/bin/bash

# üè• Health Check Script for WebSocket Tunnel
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./health-check.sh [--notify] [--restart]

set -e

COLOR_GREEN='\033[0;32m'
COLOR_BLUE='\033[0;34m' 
COLOR_RED='\033[0;31m'
COLOR_YELLOW='\033[1;33m'
COLOR_NC='\033[0m'

HEALTH_URL="http://localhost:3000/health"
STATUS_URL="http://localhost:3000/status"
NOTIFY=false
AUTO_RESTART=false

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while [[ $# -gt 0 ]]; do
    case $1 in
        --notify)
            NOTIFY=true
            shift
            ;;
        --restart)
            AUTO_RESTART=true
            shift
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [--notify] [--restart]"
            echo "  --notify    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö"
            echo "  --restart   –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏ —Å–±–æ—è—Ö"
            exit 1
            ;;
    esac
done

log() {
    echo -e "${COLOR_BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${COLOR_NC} $1"
}

success() {
    echo -e "${COLOR_GREEN}[SUCCESS]${COLOR_NC} $1"
}

error() {
    echo -e "${COLOR_RED}[ERROR]${COLOR_NC} $1"
}

warning() {
    echo -e "${COLOR_YELLOW}[WARNING]${COLOR_NC} $1"
}

notify() {
    if [ "$NOTIFY" = true ]; then
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email, Slack, Telegram –∏ —Ç.–¥.
        echo "üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: $1"
        # osascript -e "display notification \"$1\" with title \"Tunnel Health Check\""
    fi
}

restart_service() {
    if [ "$AUTO_RESTART" = true ]; then
        warning "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–∏—Å—ã..."
        pm2 restart all
        sleep 5
        return 0
    fi
    return 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
check_server() {
    log "üîç –ü—Ä–æ–≤–µ—Ä—è—é –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä..."
    
    local http_code
    http_code=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 "$HEALTH_URL" 2>/dev/null || echo "000")
    
    if [ "$http_code" = "200" ]; then
        success "‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ—Ä—Ç 3000)"
        return 0
    else
        error "‚ùå HTTP —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: $http_code)"
        notify "Tunnel HTTP Server Down - Code: $http_code"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
check_websocket() {
    log "üîç –ü—Ä–æ–≤–µ—Ä—è—é WebSocket —Å–µ—Ä–≤–µ—Ä..."
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞
    if nc -z localhost 3001 2>/dev/null; then
        success "‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç (–ø–æ—Ä—Ç 3001)"
        return 0
    else
        error "‚ùå WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø–æ—Ä—Ç 3001)"
        notify "Tunnel WebSocket Server Down"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
check_clients() {
    log "üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤..."
    
    local response
    response=$(curl -s --connect-timeout 10 "$STATUS_URL" 2>/dev/null || echo "{}")
    
    local client_count
    client_count=$(echo "$response" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    print(data.get('connectedClients', 0))
except:
    print(0)
" 2>/dev/null || echo "0")
    
    if [ "$client_count" -gt 0 ]; then
        success "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: $client_count"
        return 0
    else
        warning "‚ö†Ô∏è  –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
        notify "No clients connected to tunnel"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ PM2
check_pm2() {
    log "üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ—Ü–µ—Å—Å—ã PM2..."
    
    if ! command -v pm2 &> /dev/null; then
        warning "‚ö†Ô∏è  PM2 –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    local pm2_status
    pm2_status=$(pm2 jlist 2>/dev/null || echo "[]")
    
    local running_count
    running_count=$(echo "$pm2_status" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    count = sum(1 for p in data if p.get('pm2_env', {}).get('status') == 'online')
    print(count)
except:
    print(0)
" 2>/dev/null || echo "0")
    
    if [ "$running_count" -gt 0 ]; then
        success "‚úÖ PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ: $running_count"
        return 0
    else
        error "‚ùå –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
        notify "No PM2 processes running"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
check_memory() {
    log "üîç –ü—Ä–æ–≤–µ—Ä—è—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏..."
    
    local memory_usage
    memory_usage=$(free | grep '^Mem:' | awk '{printf "%.1f", ($3/$2) * 100.0}' 2>/dev/null || echo "0")
    
    local memory_threshold=90
    
    if (( $(echo "$memory_usage > $memory_threshold" | bc -l) )); then
        warning "‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memory_usage}%"
        notify "High memory usage: ${memory_usage}%"
        return 1
    else
        success "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memory_usage}%"
        return 0
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
check_disk() {
    log "üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ..."
    
    local disk_usage
    disk_usage=$(df . | awk 'NR==2 {print $(NF-1)}' | sed 's/%//')
    
    local disk_threshold=85
    
    if [ "$disk_usage" -gt $disk_threshold ]; then
        warning "‚ö†Ô∏è  –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: ${disk_usage}%"
        notify "Low disk space: ${disk_usage}%"
        return 1
    else
        success "‚úÖ –°–≤–æ–±–æ–¥–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: $((100-disk_usage))%"
        return 0
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
main() {
    log "üè• –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è WebSocket Tunnel..."
    echo "=================================================="
    
    local issues=0
    local critical_issues=0
    
    # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if ! check_server; then
        ((critical_issues++))
        ((issues++))
    fi
    
    if ! check_websocket; then
        ((critical_issues++))
        ((issues++))
    fi
    
    if ! check_pm2; then
        ((critical_issues++))
        ((issues++))
    fi
    
    # –ù–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if ! check_clients; then
        ((issues++))
    fi
    
    if ! check_memory; then
        ((issues++))
    fi
    
    if ! check_disk; then
        ((issues++))
    fi
    
    echo "=================================================="
    
    if [ $critical_issues -gt 0 ]; then
        error "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: $critical_issues"
        
        if restart_service; then
            log "üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è..."
            sleep 10
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            if check_server && check_websocket && check_pm2; then
                success "‚úÖ –°–µ—Ä–≤–∏—Å—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"
                issues=0
            else
                error "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
                notify "Failed to restart tunnel services"
            fi
        else
            log "üí° –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: $0 --restart"
        fi
        
    elif [ $issues -gt 0 ]; then
        warning "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: $issues"
        
    else
        success "üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
    fi
    
    log "üìä –ò—Ç–æ–≥–æ –ø—Ä–æ–±–ª–µ–º: $issues (–∫—Ä–∏—Ç–∏—á–Ω—ã—Ö: $critical_issues)"
    
    return $issues
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
