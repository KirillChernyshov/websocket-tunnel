import { TunnelWebSocketClient } from './websocket';
import { HttpClient } from './http-client';
import { ClientMapping } from '../shared/types';
import * as fs from 'fs';
import * as path from 'path';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
interface MappingConfig {
  client: {
    id: string;
    name: string;
    defaultTarget: string;
  };
  mappings: Array<{
    prefix: string;
    target: string;
    description: string;
    enabled: boolean;
    healthCheck?: string;
    protected?: boolean;
  }>;
  options: {
    enableFallback: boolean;
    healthCheckInterval: number;
    retryFailedRequests: boolean;
    maxRetries: number;
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function loadMappingConfig(): MappingConfig {
  const configPath = path.join(process.cwd(), 'mappings.json');
  const examplePath = path.join(process.cwd(), 'mappings.json.example');
  
  // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ç–∫—É—é –æ—à–∏–±–∫—É
  if (!fs.existsSync(configPath)) {
    console.log('');
    console.log('‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª mappings.json –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    console.log('');
    console.log('üîß –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
    console.log('');
    console.log('   1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
    console.log('      cp mappings.json.example mappings.json');
    console.log('');
    console.log('   2. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ mappings.json –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã:');
    console.log('      - –£–∫–∞–∂–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π CLIENT_ID');
    console.log('      - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–¥—Ä–µ—Å–∞ –≤–∞—à–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π');
    console.log('      - –í–∫–ª—é—á–∏—Ç–µ/–≤—ã–∫–ª—é—á–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –º–∞–ø–∏–Ω–≥–∏');
    console.log('');
    console.log('   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç');
    console.log('');
    
    if (fs.existsSync(examplePath)) {
      console.log('üìÑ –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤: mappings.json.example');
    } else {
      console.log('‚ö†Ô∏è  –§–∞–π–ª mappings.json.example –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }
    
    console.log('');
    console.log('üí° mappings.json –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.');
    console.log('   –ë–ï–ó –ù–ï–ì–û –ö–õ–ò–ï–ù–¢ –ù–ï –ó–ù–ê–ï–¢ –ö–£–î–ê –ú–ê–ü–ò–¢–¨ –ó–ê–ü–†–û–°–´!');
    console.log('');
    process.exit(1);
  }
  
  try {
    const configData = fs.readFileSync(configPath, 'utf8');
    const config = JSON.parse(configData);
    console.log(`üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑: ${configPath}`);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (!config.client || !config.client.id || !config.client.name) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è client –∏–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è id/name');
    }
    
    if (!config.mappings || !Array.isArray(config.mappings)) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è mappings –∏–ª–∏ –æ–Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
    }
    
    return config;
  } catch (error) {
    console.log('');
    console.log('‚ùå –û–®–ò–ë–ö–ê –í –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò mappings.json:');
    console.log('');
    console.log(`   ${error}`);
    console.log('');
    console.log('üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏–ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª:');
    console.log('   1. rm mappings.json');
    console.log('   2. cp mappings.json.example mappings.json');
    console.log('   3. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª');
    console.log('');
    process.exit(1);
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const MAPPING_CONFIG = loadMappingConfig();

// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞–ø–∏–Ω–≥–∏
const activeMappings: ClientMapping[] = MAPPING_CONFIG.mappings
  .filter(mapping => mapping.enabled)
  .map(mapping => ({
    prefix: mapping.prefix,
    target: mapping.target,
    description: mapping.description
  }));

// –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  SERVER_URL: process.env.SERVER_WS_URL || 'ws://localhost:3001',
  CLIENT_ID: MAPPING_CONFIG.client.id,
  CLIENT_NAME: MAPPING_CONFIG.client.name,
  LOCAL_TARGET: MAPPING_CONFIG.client.defaultTarget,
  RECONNECT_INTERVAL: parseInt(process.env.RECONNECT_INTERVAL || '5000'),
  HEARTBEAT_INTERVAL: parseInt(process.env.HEARTBEAT_INTERVAL || '30000'),
  MAPPINGS: activeMappings,
};

// Helper function to get HTTP server URL from WebSocket URL
function getHttpServerUrl(wsUrl: string): string {
  try {
    const url = new URL(wsUrl);
    const protocol = url.protocol === 'wss:' ? 'https:' : 'http:';
    const port = url.port || (url.protocol === 'wss:' ? '443' : '80');
    const httpPort = url.port === '3001' ? '3000' : (parseInt(port) - 1).toString();
    return `${protocol}//${url.hostname}:${httpPort}`;
  } catch {
    return 'http://localhost:3000';
  }
}

const HTTP_SERVER_URL = getHttpServerUrl(CONFIG.SERVER_URL);

console.log('üöÄ –ó–∞–ø—É—Å–∫ WebSocket Tunnel Client');
console.log(`üì° –°–µ—Ä–≤–µ—Ä: ${CONFIG.SERVER_URL}`);
console.log(`üÜî Client ID: ${CONFIG.CLIENT_ID}`);
console.log(`üìù –ò–º—è: ${CONFIG.CLIENT_NAME}`);
console.log(`üéØ –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å: ${CONFIG.LOCAL_TARGET}`);

if (CONFIG.MAPPINGS.length > 0) {
  console.log(`üó∫Ô∏è  –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ ${CONFIG.MAPPINGS.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–ø–∏–Ω–≥–æ–≤:`);
  CONFIG.MAPPINGS.forEach((mapping, index) => {
    console.log(`   ${index + 1}. ${mapping.prefix} ‚Üí ${mapping.target} (${mapping.description})`);
  });
} else {
  console.log('');
  console.log('‚ö†Ô∏è  –ù–ï–¢ –ê–ö–¢–ò–í–ù–´–• –ú–ê–ü–ò–ù–ì–û–í!');
  console.log('');
  console.log('üîß –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ defaultTarget:');
  console.log(`   ${CONFIG.LOCAL_TARGET}`);
  console.log('');
  console.log('üí° –ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞–ø–∏–Ω–≥–∏:');
  console.log('   1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ mappings.json');
  console.log('   2. –í–∫–ª—é—á–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –º–∞–ø–∏–Ω–≥–∏ (enabled: true)');
  console.log('   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç');
  console.log('');
}

// Create HTTP clients for each mapping
const httpClients = new Map<string, HttpClient>();

// Main client (for default mapping and fallback)
const mainHttpClient = new HttpClient(CONFIG.LOCAL_TARGET);
httpClients.set('default', mainHttpClient);

// Additional clients for each mapping
CONFIG.MAPPINGS.forEach(mapping => {
  httpClients.set(mapping.target, new HttpClient(mapping.target));
});

// Initialize WebSocket client
const wsClient = new TunnelWebSocketClient(CONFIG.SERVER_URL, {
  clientId: CONFIG.CLIENT_ID,
  clientName: CONFIG.CLIENT_NAME,
  reconnectInterval: CONFIG.RECONNECT_INTERVAL,
  heartbeatInterval: CONFIG.HEARTBEAT_INTERVAL,
  mappings: CONFIG.MAPPINGS,
});

// Function to display routing information
function displayRoutingInfo() {
  console.log('');
  console.log('üéØ ========================================');
  console.log('üéØ –¢–£–ù–ù–ï–õ–¨ –ó–ê–ü–£–©–ï–ù!');
  console.log('üéØ ========================================');
  console.log('');
  console.log(`üìç –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞:`);
  console.log(`   ${HTTP_SERVER_URL}/client/${CONFIG.CLIENT_ID}`);
  console.log('');
  
  if (CONFIG.MAPPINGS.length > 0) {
    console.log('üó∫Ô∏è  –ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞–ø–∏–Ω–≥–∏:');
    console.log('');
    
    CONFIG.MAPPINGS.forEach(mapping => {
      console.log(`   üìÅ ${mapping.prefix.toUpperCase()}:`);
      console.log(`      ${HTTP_SERVER_URL}/client/${CONFIG.CLIENT_ID}/${mapping.prefix}/* ‚Üí ${mapping.target}`);
      console.log(`      ${mapping.description}`);
      console.log('');
    });
    
    console.log(`   üìÅ DEFAULT (fallback):`);
    console.log(`      ${HTTP_SERVER_URL}/client/${CONFIG.CLIENT_ID}/* ‚Üí ${CONFIG.LOCAL_TARGET}`);
    console.log(`      –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`);
    console.log('');
  } else {
    console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–ï–¢ –ù–ê–°–¢–†–û–ï–ù–ù–´–• –ú–ê–ü–ò–ù–ì–û–í!');
    console.log('');
    console.log('üîÑ –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç:');
    console.log(`     ${HTTP_SERVER_URL}/client/${CONFIG.CLIENT_ID}/* ‚Üí ${CONFIG.LOCAL_TARGET}`);
    console.log('');
    console.log('üîß –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–ø–∏–Ω–≥–æ–≤ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ mappings.json');
    console.log('');
  }
  
  console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
  console.log(`     curl "${HTTP_SERVER_URL}/client/${CONFIG.CLIENT_ID}/"`);
  
  if (CONFIG.MAPPINGS.length > 0) {
    CONFIG.MAPPINGS.forEach(mapping => {
      console.log(`     curl "${HTTP_SERVER_URL}/client/${CONFIG.CLIENT_ID}/${mapping.prefix}/"`);
    });
  }
  
  console.log('');
  console.log('üéØ ========================================');
  console.log(`üéØ –ê–¥—Ä–µ—Å: ${HTTP_SERVER_URL}/client/${CONFIG.CLIENT_ID}`);
  console.log(`üéØ –ú–∞–ø–∏–Ω–≥–æ–≤: ${CONFIG.MAPPINGS.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö`);
  console.log('üéØ ========================================');
  console.log('');
}

// Function to get appropriate HTTP client for request
function getHttpClientForRequest(payload: any): HttpClient {
  if (payload.targetMapping) {
    const client = httpClients.get(payload.targetMapping);
    if (client) {
      console.log(`üéØ –ú–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ –º–∞–ø–∏–Ω–≥: ${payload.targetMapping}`);
      return client;
    }
  }
  
  console.log(`üéØ –ú–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ –¥–µ—Ñ–æ–ª—Ç: ${CONFIG.LOCAL_TARGET}`);
  return mainHttpClient;
}

// Handle incoming requests from the server
wsClient.onRequest(async (requestId, payload) => {
  const mappingInfo = payload.targetMapping ? ` (${payload.targetMapping})` : ' (default)';
  console.log(`üì® –ó–∞–ø—Ä–æ—Å ${requestId}: ${payload.method} ${payload.path}${mappingInfo}`);
  
  try {
    const startTime = Date.now();
    const httpClient = getHttpClientForRequest(payload);
    const response = await httpClient.makeRequest(payload);
    const duration = Date.now() - startTime;
    
    console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å ${requestId} –≤—ã–ø–æ–ª–Ω–µ–Ω: ${response.statusCode} (${duration}ms)${mappingInfo}`);
    
    wsClient.sendResponse(requestId, {
      ...response,
      duration,
    });
    
  } catch (error) {
    console.error(`‚ùå –ó–∞–ø—Ä–æ—Å ${requestId} –æ—à–∏–±–∫–∞:`, error);
    
    wsClient.sendError(requestId, {
      message: error instanceof Error ? error.message : 'Unknown error',
      code: 'REQUEST_FAILED',
    });
  }
});

// Handle connection events
wsClient.onConnect(() => {
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É —Ç—É–Ω–Ω–µ–ª—è');
});

wsClient.onDisconnect(() => {
  console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Ç—É–Ω–Ω–µ–ª—è');
  console.log('üîÑ –¢—É–Ω–Ω–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω...');
});

wsClient.onError((error) => {
  console.error('üö® WebSocket –æ—à–∏–±–∫–∞:', error);
});

wsClient.onRegister((confirmed) => {
  if (confirmed) {
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
    console.log(`üéâ –ö–ª–∏–µ–Ω—Ç "${CONFIG.CLIENT_NAME}" (${CONFIG.CLIENT_ID}) –æ–Ω–ª–∞–π–Ω!`);
    
    if (CONFIG.MAPPINGS.length > 0) {
      console.log(`üó∫Ô∏è  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å ${CONFIG.MAPPINGS.length} –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –º–∞–ø–∏–Ω–≥–∞–º–∏`);
    } else {
      console.log('‚ö†Ô∏è  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ë–ï–ó –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–ø–∏–Ω–≥–æ–≤ (—Ç–æ–ª—å–∫–æ default)');
    }
    
    displayRoutingInfo();
  } else {
    console.log('üìù –ó–∞–ø—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...');
  }
});

// Start the client
wsClient.connect();

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('');
  console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞...');
  console.log(`üîå –¢—É–Ω–Ω–µ–ª—å ${HTTP_SERVER_URL}/client/${CONFIG.CLIENT_ID} —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
  wsClient.disconnect();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞...');
  wsClient.disconnect();
  process.exit(0);
});

process.on('uncaughtException', (error) => {
  console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π reject:', promise, '–ø—Ä–∏—á–∏–Ω–∞:', reason);
  process.exit(1);
});

export { wsClient, httpClients, CONFIG, MAPPING_CONFIG };